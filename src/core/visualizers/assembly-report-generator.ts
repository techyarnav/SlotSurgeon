import { AssemblyAnalysis, AssemblyBlock, AssemblyRisk, StorageAccess } from '../assembly/assembly-analyzer';

export interface AssemblyReportOptions {
  format: 'html' | 'markdown' | 'json';
  theme: 'light' | 'dark';
  includeOperations: boolean;
  includeRisks: boolean;
  includeStorageAccess: boolean;
  includeGasAnalysis: boolean;
}

export class AssemblyReportGenerator {
  private readonly mergedOptions: AssemblyReportOptions;

  constructor(
    private readonly analysis: AssemblyAnalysis,
    options: Partial<AssemblyReportOptions> = {}
  ) {
    this.mergedOptions = {
      format: 'html',
      theme: 'light',
      includeOperations: true,
      includeRisks: true,
      includeStorageAccess: true,
      includeGasAnalysis: true,
      ...options
    };
  }

  generate(): string {
    switch (this.mergedOptions.format) {
      case 'html':
        return this.generateHtmlReport();
      case 'markdown':
        return this.generateMarkdownReport();
      case 'json':
        return this.generateJsonReport();
      default:
        throw new Error(`Unsupported format: ${this.mergedOptions.format}`);
    }
  }

  private generateHtmlReport(): string {
    const isDark = this.mergedOptions.theme === 'dark';
    const securityBadgeClass = this.getSecurityBadgeClass(this.analysis.securityScore);


    const risksSection = this.mergedOptions.includeRisks ? this.generateRisksSection() : '';
    const storageSection = this.mergedOptions.includeStorageAccess ? this.generateStorageAccessSection() : '';
    const operationsSection = this.mergedOptions.includeOperations ? this.generateOperationsSection() : '';
    const gasSection = this.mergedOptions.includeGasAnalysis ? this.generateGasAnalysisSection() : '';

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assembly Analysis - ${this.analysis.contractName}</title>
    <style>
        ${this.getHtmlStyles(isDark)}
    </style>
</head>
<body class="${this.mergedOptions.theme}">
    <div class="container">
        <header>
            <h1>‚ö° Assembly Analysis Report</h1>
            <h2>${this.analysis.contractName}</h2>
            <div class="security-badge ${securityBadgeClass}">
                <span class="score">${this.analysis.securityScore}/100</span>
                <span class="level">${this.getSecurityLevel(this.analysis.securityScore)}</span>
            </div>
        </header>

        <div class="summary-section">
            <h3>üìä Analysis Summary</h3>
            <div class="summary-grid">
                <div class="summary-card">
                    <div class="summary-value">${this.analysis.totalBlocks}</div>
                    <div class="summary-label">Assembly Blocks</div>
                </div>
                <div class="summary-card">
                    <div class="summary-value">${this.analysis.totalOperations}</div>
                    <div class="summary-label">Total Operations</div>
                </div>
                <div class="summary-card">
                    <div class="summary-value">${this.analysis.risks.length}</div>
                    <div class="summary-label">Security Risks</div>
                </div>
                <div class="summary-card">
                    <div class="summary-value">${this.analysis.storageAccesses.length}</div>
                    <div class="summary-label">Storage Accesses</div>
                </div>
            </div>

            <div class="complexity-indicator">
                <span class="complexity-label">Gas Complexity:</span>
                <span class="complexity-badge ${this.analysis.gasComplexity}">${this.analysis.gasComplexity.toUpperCase()}</span>
            </div>
        </div>

        ${risksSection}
        ${storageSection}
        ${operationsSection}
        ${gasSection}

        <div class="recommendations-section">
            <h3>üí° Recommendations</h3>
            <div class="recommendations-list">
                ${this.analysis.recommendations.map((rec: string) =>
                    `<div class="recommendation-item">
                        <div class="recommendation-icon">üí°</div>
                        <div class="recommendation-text">${rec}</div>
                    </div>`
                ).join('')}
            </div>
        </div>

        <footer>
            <p>Generated by SlotSurgeon ‚Ä¢ ${new Date().toISOString()}</p>
        </footer>
    </div>
</body>
</html>`;
  }

  private generateRisksSection(): string {
    if (this.analysis.risks.length === 0) {
      return `<div class="risks-section">
          <h3>üõ°Ô∏è Security Risks</h3>
          <p class="no-risks">No security risks detected in assembly code.</p>
      </div>`;
    }

    const risksByType = this.groupRisksByType(this.analysis.risks);
    let html = `<div class="risks-section">
        <h3>üõ°Ô∏è Security Risks (${this.analysis.risks.length})</h3>`;

    Object.entries(risksByType).forEach(([type, risks]) => {
      html += `<div class="risk-group">
          <h4 class="risk-type-header">${this.getRiskTypeLabel(type)} (${risks.length})</h4>
          <div class="risks-list">`;

      risks.forEach(risk => {
        html += `<div class="risk-item ${risk.severity}">
            <div class="risk-icon">${this.getRiskIcon(risk.type)}</div>
            <div class="risk-content">
                <div class="risk-header">
                    <span class="risk-opcode">${risk.opcode.toUpperCase()}</span>
                    <span class="risk-line">Line ${risk.line}</span>
                    <span class="severity-badge ${risk.severity}">${risk.severity}</span>
                </div>
                <div class="risk-description">${risk.description}</div>
                <div class="risk-impact"><strong>Impact:</strong> ${risk.impact}</div>
                <div class="risk-recommendation"><strong>Recommendation:</strong> ${risk.recommendation}</div>
            </div>
        </div>`;
      });

      html += `</div></div>`;
    });

    html += `</div>`;
    return html;
  }

  private generateStorageAccessSection(): string {
    if (this.analysis.storageAccesses.length === 0) {
      return `<div class="storage-section">
          <h3>üíæ Storage Access Analysis</h3>
          <p class="no-storage">No storage access operations detected.</p>
      </div>`;
    }

    let html = `<div class="storage-section">
        <h3>üíæ Storage Access Analysis (${this.analysis.storageAccesses.length})</h3>
        <div class="storage-table-container">
            <table class="storage-table">
                <thead>
                    <tr>
                        <th>Line</th>
                        <th>Operation</th>
                        <th>Slot</th>
                        <th>Variable</th>
                        <th>Risk</th>
                    </tr>
                </thead>
                <tbody>`;

    this.analysis.storageAccesses.forEach((access: any) => {
      const riskClass = access.potentialCollision ? 'high-risk' : (access.isComputed ? 'medium-risk' : 'low-risk');
      const riskText = access.potentialCollision ? 'Collision Risk' : (access.isComputed ? 'Computed Slot' : 'Safe');

      html += `<tr class="storage-row ${riskClass}">
          <td class="line-cell">${access.line}</td>
          <td class="operation-cell">${access.type.toUpperCase()}</td>
          <td class="slot-cell">${access.slot}</td>
          <td class="variable-cell">${access.affectedVariable || 'Unknown'}</td>
          <td class="risk-cell">${riskText}</td>
      </tr>`;
    });

    html += `</tbody></table></div></div>`;
    return html;
  }

  private generateOperationsSection(): string {
    let html = `<div class="operations-section">
        <h3>‚öôÔ∏è Assembly Operations</h3>`;

    this.analysis.assemblyBlocks.forEach((block: any) => {
      html += `<div class="assembly-block">
          <div class="block-header">
              <h4>Block ${block.id}</h4>
              <div class="block-info">
                  <span class="block-lines">Lines ${block.startLine}-${block.endLine}</span>
                  <span class="block-operations">${block.operations.length} operations</span>
                  <span class="gas-complexity ${block.gasComplexity}">${block.gasComplexity} gas</span>
              </div>
          </div>

          <div class="operations-table-container">
              <table class="operations-table">
                  <thead>
                      <tr>
                          <th>Line</th>
                          <th>Opcode</th>
                          <th>Category</th>
                          <th>Gas</th>
                          <th>Description</th>
                      </tr>
                  </thead>
                  <tbody>`;

      block.operations.forEach((op: any) => {
        html += `<tr class="operation-row">
            <td class="line-cell">${op.line}</td>
            <td class="opcode-cell">${op.opcode.toUpperCase()}</td>
            <td class="category-cell">${op.category}</td>
            <td class="gas-cell">${op.gasUsage}</td>
            <td class="description-cell">${op.description}</td>
        </tr>`;
      });

      html += `</tbody></table></div></div>`;
    });

    html += `</div>`;
    return html;
  }

  private generateGasAnalysisSection(): string {
    const totalGas = this.analysis.assemblyBlocks.reduce((sum: number, block: any) =>
      sum + block.operations.reduce((blockSum: number, op: any) => blockSum + op.gasUsage, 0), 0
    );

    const avgGasPerBlock = this.analysis.totalBlocks > 0 ? Math.round(totalGas / this.analysis.totalBlocks) : 0;
    const highGasOps = this.analysis.assemblyBlocks.flatMap((b: any) => b.operations).filter((op: any) => op.gasUsage > 1000);

    return `<div class="gas-section">
        <h3>‚õΩ Gas Analysis</h3>
        <div class="gas-summary">
            <div class="gas-metric">
                <span class="gas-label">Total Estimated Gas:</span>
                <span class="gas-value">${totalGas.toLocaleString()}</span>
            </div>
            <div class="gas-metric">
                <span class="gas-label">Average per Block:</span>
                <span class="gas-value">${avgGasPerBlock.toLocaleString()}</span>
            </div>
            <div class="gas-metric">
                <span class="gas-label">High-Cost Operations:</span>
                <span class="gas-value">${highGasOps.length}</span>
            </div>
        </div>

        ${highGasOps.length > 0 ? `
        <div class="high-gas-operations">
            <h4>High Gas Operations</h4>
            <div class="high-gas-list">
                ${highGasOps.map((op: any) =>
                    `<div class="high-gas-item">
                        <span class="high-gas-opcode">${op.opcode.toUpperCase()}</span>
                        <span class="high-gas-line">Line ${op.line}</span>
                        <span class="high-gas-cost">${op.gasUsage} gas</span>
                    </div>`
                ).join('')}
            </div>
        </div>` : ''}
    </div>`;
  }

  private generateMarkdownReport(): string {
    const securityEmoji = this.getSecurityEmoji(this.analysis.securityScore);

    return `# ‚ö° Assembly Analysis Report - ${this.analysis.contractName}

## ${securityEmoji} Security Score: ${this.analysis.securityScore}/100 (${this.getSecurityLevel(this.analysis.securityScore)})

### üìä Summary

| Metric | Value |
|--------|-------|
| Assembly Blocks | ${this.analysis.totalBlocks} |
| Total Operations | ${this.analysis.totalOperations} |
| Security Risks | ${this.analysis.risks.length} |
| Storage Accesses | ${this.analysis.storageAccesses.length} |
| Gas Complexity | ${this.analysis.gasComplexity.toUpperCase()} |

### üõ°Ô∏è Security Risks (${this.analysis.risks.length})

${this.analysis.risks.length === 0 ? 'No security risks detected.' :
  this.analysis.risks.map((risk: any) =>
    `#### ${this.getRiskIcon(risk.type)} ${risk.type.toUpperCase()} - ${risk.severity.toUpperCase()}

**Opcode:** \`${risk.opcode.toUpperCase()}\` (Line ${risk.line})

**Description:** ${risk.description}

**Impact:** ${risk.impact}

**Recommendation:** ${risk.recommendation}

---`
  ).join('\n\n')
}

### üí° Recommendations

${this.analysis.recommendations.map((rec: string) => `- ${rec}`).join('\n')}

---
*Generated by SlotSurgeon on ${new Date().toISOString()}*`;
  }

  private generateJsonReport(): string {
    return JSON.stringify( {
      ...this.analysis,
      metadata: {
        generatedAt: new Date().toISOString(),
        tool: 'SlotSurgeon',
        version: '0.1.0'
      }
    }, null, 2);
  }


private getHtmlStyles(isDark: boolean): string {
  const bg = isDark ? '#1a1a1a' : '#ffffff';
  const text = isDark ? '#ffffff' : '#333333';
  const border = isDark ? '#333333' : '#e0e0e0';


  let styles = `
    * { margin: 0; padding: 0; box-sizing: border-box; }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: ${bg};
      color: ${text};
      line-height: 1.6;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    header {
      text-align: center;
      margin-bottom: 2rem;
      padding: 2rem;
      border-bottom: 2px solid ${border};
    }

    header h1 {
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
      background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .security-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 1rem 2rem;
      border-radius: 12px;
      margin: 1rem 0;
      font-weight: bold;
    }

    .security-badge.safe { background: #d4edda; color: #155724; }
    .security-badge.warning { background: #fff3cd; color: #856404; }
    .security-badge.danger { background: #f8d7da; color: #721c24; }
    .security-badge.critical { background: #f5c6cb; color: #721c24; }

    .score { font-size: 1.5rem; }
    .level { font-size: 1.2rem; }

    .summary-section {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }

    .summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin: 1rem 0;
    }

    .summary-card {
      text-align: center;
      padding: 1.5rem;
      background: ${isDark ? '#333333' : '#ffffff'};
      border-radius: 8px;
      border: 1px solid ${border};
    }

    .summary-value {
      font-size: 2rem;
      font-weight: bold;
      color: #667eea;
    }

    .summary-label {
      margin-top: 0.5rem;
      color: ${isDark ? '#aaaaaa' : '#666666'};
    }

    .complexity-indicator {
      text-align: center;
      margin-top: 1rem;
    }

    .complexity-badge {
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-weight: bold;
      margin-left: 0.5rem;
    }

    .complexity-badge.low { background: #d4edda; color: #155724; }
    .complexity-badge.medium { background: #fff3cd; color: #856404; }
    .complexity-badge.high { background: #f8d7da; color: #721c24; }

    .recommendations-section {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }

    .recommendation-item {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin: 1rem 0;
    }

    .recommendation-icon {
      font-size: 1.5rem;
    }

    footer {
      text-align: center;
      margin-top: 3rem;
      padding: 2rem;
      border-top: 1px solid ${border};
      color: ${isDark ? '#aaaaaa' : '#666666'};
    }

    @media (max-width: 768px) {
      .container { padding: 10px; }
      header h1 { font-size: 2rem; }
      .summary-grid { grid-template-columns: 1fr; }
    }`;


  const hasSections = this.mergedOptions.includeRisks || this.mergedOptions.includeStorageAccess ||
                      this.mergedOptions.includeOperations || this.mergedOptions.includeGasAnalysis;

  if (hasSections) {
    styles += `

    .section-container {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }`;
  }

  if (this.mergedOptions.includeRisks) {
    styles += `

    .risks-section {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }

    .risk-group {
      margin: 1rem 0;
    }

    .risk-item {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      padding: 1rem;
      margin: 0.5rem 0;
      border-radius: 8px;
      border-left: 4px solid;
    }

    .risk-item.critical { border-left-color: #dc3545; background: ${isDark ? '#3a1e1e' : '#fff5f5'}; }
    .risk-item.high { border-left-color: #fd7e14; background: ${isDark ? '#3a2e1e' : '#fff8f0'}; }
    .risk-item.medium { border-left-color: #ffc107; background: ${isDark ? '#3a3a1e' : '#fffbf0'}; }
    .risk-item.low { border-left-color: #28a745; background: ${isDark ? '#1e3a1e' : '#f8fff8'}; }

    .risk-icon { font-size: 1.5rem; }
    .risk-content { flex: 1; }

    .risk-header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 0.5rem;
    }

    .risk-opcode {
      font-family: monospace;
      font-weight: bold;
      background: ${isDark ? '#444444' : '#e9ecef'};
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
    }

    .severity-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: bold;
      text-transform: uppercase;
    }

    .severity-badge.critical { background: #dc3545; color: white; }
    .severity-badge.high { background: #fd7e14; color: white; }
    .severity-badge.medium { background: #ffc107; color: #000; }
    .severity-badge.low { background: #28a745; color: white; }`;
  }

  if (this.mergedOptions.includeStorageAccess) {
    styles += `

    .storage-section {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }

    .storage-table-container {
      overflow-x: auto;
      margin-top: 1rem;
    }

    .storage-table {
      width: 100%;
      border-collapse: collapse;
    }

    .storage-table th, .storage-table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid ${border};
    }

    .storage-table th {
      background: ${isDark ? '#333333' : '#f0f0f0'};
      font-weight: 600;
    }

    .storage-row.high-risk { background: ${isDark ? '#3a1e1e' : '#fff5f5'}; }
    .storage-row.medium-risk { background: ${isDark ? '#3a3a1e' : '#fffbf0'}; }
    .storage-row.low-risk { background: ${isDark ? '#1e3a1e' : '#f8fff8'}; }`;
  }

  if (this.mergedOptions.includeOperations) {
    styles += `

    .operations-section {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }

    .operations-table-container {
      overflow-x: auto;
      margin-top: 1rem;
    }

    .operations-table {
      width: 100%;
      border-collapse: collapse;
    }

    .operations-table th, .operations-table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid ${border};
    }

    .operations-table th {
      background: ${isDark ? '#333333' : '#f0f0f0'};
      font-weight: 600;
    }

    .assembly-block {
      margin: 1rem 0;
      border: 1px solid ${border};
      border-radius: 8px;
    }

    .block-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      background: ${isDark ? '#333333' : '#f0f0f0'};
      border-radius: 8px 8px 0 0;
    }

    .block-info {
      display: flex;
      gap: 1rem;
      font-size: 0.9rem;
    }

    .gas-complexity.low { color: #28a745; }
    .gas-complexity.medium { color: #ffc107; }
    .gas-complexity.high { color: #dc3545; }`;
  }

  if (this.mergedOptions.includeGasAnalysis) {
    styles += `

    .gas-section {
      margin: 2rem 0;
      padding: 2rem;
      background: ${isDark ? '#2a2a2a' : '#f8f9fa'};
      border-radius: 12px;
      border: 1px solid ${border};
    }

    .gas-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin: 1rem 0;
    }

    .gas-metric {
      display: flex;
      justify-content: space-between;
      padding: 1rem;
      background: ${isDark ? '#333333' : '#ffffff'};
      border-radius: 8px;
      border: 1px solid ${border};
    }

    .gas-value {
      font-weight: bold;
      color: #667eea;
    }

    .high-gas-operations {
      margin-top: 1rem;
    }

    .high-gas-list {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }

    .high-gas-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.5rem;
      background: ${isDark ? '#444444' : '#e9ecef'};
      border-radius: 4px;
      font-size: 0.9rem;
    }`;
  }

  return styles;
}

  private getSecurityBadgeClass(score: number): string {
    if (score >= 80) return 'safe';
    if (score >= 60) return 'warning';
    if (score >= 40) return 'danger';
    return 'critical';
  }

  private getSecurityLevel(score: number): string {
    if (score >= 80) return 'SAFE';
    if (score >= 60) return 'WARNING';
    if (score >= 40) return 'DANGER';
    return 'CRITICAL';
  }

  private getSecurityEmoji(score: number): string {
    if (score >= 80) return '‚úÖ';
    if (score >= 60) return '‚ö†Ô∏è';
    if (score >= 40) return 'üö®';
    return 'üõë';
  }

  private groupRisksByType(risks: AssemblyRisk[]): Record<string, AssemblyRisk[]> {
    return risks.reduce((groups, risk) => {
      if (!groups[risk.type]) {
        groups[risk.type] = [];
      }
      groups[risk.type].push(risk);
      return groups;
    }, {} as Record<string, AssemblyRisk[]>);
  }

  private getRiskTypeLabel(type: string): string {
    const labels: Record<string, string> = {
      'storage_collision': 'Storage Collisions',
      'unchecked_access': 'Unchecked Access',
      'dangerous_opcode': 'Dangerous Operations',
      'gas_griefing': 'Gas Issues',
      'reentrancy': 'Reentrancy Risks',
      'overflow': 'Arithmetic Issues',
      'slot_manipulation': 'Storage Manipulation'
    };
    return labels[type] || type.replace('_', ' ').toUpperCase();
  }

  private getRiskIcon(type: string): string {
    const icons: Record<string, string> = {
      'storage_collision': 'üí•',
      'unchecked_access': 'üîì',
      'dangerous_opcode': '‚ö†Ô∏è',
      'gas_griefing': '‚õΩ',
      'reentrancy': 'üîÑ',
      'overflow': 'üìà',
      'slot_manipulation': 'üéØ'
    };
    return icons[type] || '‚ö†Ô∏è';
  }
}
